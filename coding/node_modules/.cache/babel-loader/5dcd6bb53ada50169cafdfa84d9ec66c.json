{"ast":null,"code":"var _jsxFileName = \"/Users/Gwenael/Documents/cours/L1/fevrier_JavaPOO2_Js2/Js2/git/JS-avanc-/coding/src/Component/Search.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nexport default class Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [\"Go to the store\", \"Wash the dishes\", \"Learn some code\"]\n    };\n    this.removeItem = this.removeItem.bind(this);\n  }\n\n  removeItem(item) {\n    // Put our list into an array\n    const list = this.state.list.slice(); // Check to see if item passed in matches item in array\n\n    list.some((el, i) => {\n      if (el === item) {\n        // If item matches, remove it from array\n        list.splice(i, 1);\n        return true;\n      }\n    }); // Set state to list\n\n    this.setState({\n      list: list\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(List, {\n      items: this.state.list,\n      delete: this.removeItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filtered: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      filtered: this.props.items\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      filtered: nextProps.items\n    });\n  }\n\n  handleChange(e) {\n    // Variable to hold the original version of the list\n    let currentList = []; // Variable to hold the filtered list before putting into state\n\n    let newList = []; // If the search bar isn't empty\n\n    if (e.target.value !== \"\") {\n      // Assign the original list to currentList\n      currentList = this.props.items; // Use .filter() to determine which items should be displayed\n      // based on the search terms\n\n      newList = currentList.filter(item => {\n        // change current item to lowercase\n        const lc = item.toLowerCase(); // change search term to lowercase\n\n        const filter = e.target.value.toLowerCase(); // check to see if the current list item includes the search term\n        // If it does, it will be added to newList. Using lowercase eliminates\n        // issues with capitalization in search terms and search content\n\n        return lc.includes(filter);\n      });\n    } else {\n      // If the search bar is empty, set newList to original task list\n      newList = this.props.items;\n    } // Set the filtered state based on what our rules added to newList\n\n\n    this.setState({\n      filtered: newList\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"input\",\n      onChange: this.handleChange,\n      placeholder: \"Search...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.state.filtered.map(item => React.createElement(\"li\", {\n      key: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, item, \" \\xA0\", React.createElement(\"span\", {\n      className: \"delete\",\n      onClick: () => this.props.delete(item),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/Gwenael/Documents/cours/L1/fevrier_JavaPOO2_Js2/Js2/git/JS-avanc-/coding/src/Component/Search.js"],"names":["React","withRouter","connect","Search","Component","constructor","props","state","list","removeItem","bind","item","slice","some","el","i","splice","setState","render","List","filtered","handleChange","componentDidMount","items","componentWillReceiveProps","nextProps","e","currentList","newList","target","value","filter","lc","toLowerCase","includes","map","delete"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,eAAe,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAqC;AAClDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,CAAC,iBAAD,EAAoB,iBAApB,EAAuC,iBAAvC;AADK,KAAb;AAGA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACD;;AAEDD,EAAAA,UAAU,CAACE,IAAD,EAAO;AACf;AACA,UAAMH,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAX,CAAgBI,KAAhB,EAAb,CAFe,CAGf;;AACAJ,IAAAA,IAAI,CAACK,IAAL,CAAU,CAACC,EAAD,EAAKC,CAAL,KAAW;AACnB,UAAID,EAAE,KAAKH,IAAX,EAAiB;AACf;AACAH,QAAAA,IAAI,CAACQ,MAAL,CAAYD,CAAZ,EAAe,CAAf;AACA,eAAO,IAAP;AACD;AACF,KAND,EAJe,CAWf;;AACA,SAAKE,QAAL,CAAc;AACZT,MAAAA,IAAI,EAAEA;AADM,KAAd;AAGD;;AAEDU,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAS,MAAA,SAAS,EAAC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACc,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,KAAKX,KAAL,CAAWC,IAAxB;AAA8B,MAAA,MAAM,EAAE,KAAKC,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADd,CADF,CADF,CADF;AASD;;AApCiD;;AAuCpD,MAAMU,IAAN,SAAmBnB,KAAK,CAACI,SAAzB,CAAmC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTa,MAAAA,QAAQ,EAAE;AADD,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBX,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDY,EAAAA,iBAAiB,GAAG;AACpB,SAAKL,QAAL,CAAc;AACZG,MAAAA,QAAQ,EAAE,KAAKd,KAAL,CAAWiB;AADT,KAAd;AAGD;;AAEDC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC,SAAKR,QAAL,CAAc;AACZG,MAAAA,QAAQ,EAAEK,SAAS,CAACF;AADR,KAAd;AAGD;;AAECF,EAAAA,YAAY,CAACK,CAAD,EAAI;AACZ;AACJ,QAAIC,WAAW,GAAG,EAAlB,CAFgB,CAGZ;;AACJ,QAAIC,OAAO,GAAG,EAAd,CAJgB,CAMZ;;AACJ,QAAIF,CAAC,CAACG,MAAF,CAASC,KAAT,KAAmB,EAAvB,EAA2B;AACnB;AACNH,MAAAA,WAAW,GAAG,KAAKrB,KAAL,CAAWiB,KAAzB,CAFyB,CAInB;AACA;;AACNK,MAAAA,OAAO,GAAGD,WAAW,CAACI,MAAZ,CAAmBpB,IAAI,IAAI;AAC3B;AACR,cAAMqB,EAAE,GAAGrB,IAAI,CAACsB,WAAL,EAAX,CAFmC,CAG3B;;AACR,cAAMF,MAAM,GAAGL,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeG,WAAf,EAAf,CAJmC,CAK3B;AACA;AACA;;AACR,eAAOD,EAAE,CAACE,QAAH,CAAYH,MAAZ,CAAP;AACD,OATS,CAAV;AAUD,KAhBD,MAgBO;AACC;AACNH,MAAAA,OAAO,GAAG,KAAKtB,KAAL,CAAWiB,KAArB;AACD,KA1Be,CA2BZ;;;AACJ,SAAKN,QAAL,CAAc;AACZG,MAAAA,QAAQ,EAAEQ;AADE,KAAd;AAGD;;AAECV,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,SAAS,EAAC,OAA7B;AAAqC,MAAA,QAAQ,EAAE,KAAKG,YAApD;AAAkE,MAAA,WAAW,EAAC,WAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKd,KAAL,CAAWa,QAAX,CAAoBe,GAApB,CAAwBxB,IAAI,IACzB;AAAI,MAAA,GAAG,EAAEA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,IADL,WAEI;AACI,MAAA,SAAS,EAAC,QADd;AAEI,MAAA,OAAO,EAAE,MAAM,KAAKL,KAAL,CAAW8B,MAAX,CAAkBzB,IAAlB,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADH,CADL,CAFR,CADJ;AAgBH;;AAvE8B","sourcesContent":["import React from 'react';\nimport {withRouter} from 'react-router-dom';\nimport { connect } from \"react-redux\";\n\nexport default class Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [\"Go to the store\", \"Wash the dishes\", \"Learn some code\"]\n    };\n    this.removeItem = this.removeItem.bind(this);\n  }\n\n  removeItem(item) {\n    // Put our list into an array\n    const list = this.state.list.slice();\n    // Check to see if item passed in matches item in array\n    list.some((el, i) => {\n      if (el === item) {\n        // If item matches, remove it from array\n        list.splice(i, 1);\n        return true;\n      }\n    });\n    // Set state to list\n    this.setState({\n      list: list\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <div className=\"container\">\n          <section className=\"section\">\n                        <List items={this.state.list} delete={this.removeItem} />\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass List extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filtered: []\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n    this.setState({\n      filtered: this.props.items\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      filtered: nextProps.items\n    });\n  }\n\n    handleChange(e) {\n        // Variable to hold the original version of the list\n    let currentList = [];\n        // Variable to hold the filtered list before putting into state\n    let newList = [];\n\n        // If the search bar isn't empty\n    if (e.target.value !== \"\") {\n            // Assign the original list to currentList\n      currentList = this.props.items;\n\n            // Use .filter() to determine which items should be displayed\n            // based on the search terms\n      newList = currentList.filter(item => {\n                // change current item to lowercase\n        const lc = item.toLowerCase();\n                // change search term to lowercase\n        const filter = e.target.value.toLowerCase();\n                // check to see if the current list item includes the search term\n                // If it does, it will be added to newList. Using lowercase eliminates\n                // issues with capitalization in search terms and search content\n        return lc.includes(filter);\n      });\n    } else {\n            // If the search bar is empty, set newList to original task list\n      newList = this.props.items;\n    }\n        // Set the filtered state based on what our rules added to newList\n    this.setState({\n      filtered: newList\n    });\n  }\n\n    render() {\n        return (\n            <div>\n                <input type=\"text\" className=\"input\" onChange={this.handleChange} placeholder=\"Search...\" />\n                    <ul>\n                        {this.state.filtered.map(item => (\n                            <li key={item}>\n                                {item} &nbsp;\n                                <span\n                                    className=\"delete\"\n                                    onClick={() => this.props.delete(item)}\n                                    />\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}