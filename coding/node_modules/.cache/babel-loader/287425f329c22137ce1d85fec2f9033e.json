{"ast":null,"code":"var _jsxFileName = \"/Users/Gwenael/Documents/cours/L1/fevrier_JavaPOO2_Js2/Js2/git/JS-avanc-/coding/src/Component/List.js\";\nimport React from \"react\";\nimport Hearth from \"../pictures/hearth.png\";\nimport EmptyHearth from \"../pictures/hearth_empty.png\";\nimport { addFavorite, delFavorite } from \"../redux/actions\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Search } from \"./Search\";\nexport class List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filtered: [],\n      favoritesGame: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      filtered: this.props.items\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      filtered: nextProps.items\n    });\n  }\n\n  handleChange(e) {\n    // Variable to hold the original version of the list\n    let currentList = []; // Variable to hold the filtered list before putting into state\n\n    let newList = []; // If the search bar isn't empty\n\n    if (e.target.value !== \"\") {\n      // Assign the original list to currentList\n      currentList = this.props.items; // Use .filter() to determine which items should be displayed\n      // based on the search terms\n\n      newList = currentList.filter(item => {\n        // change current item to lowercase\n        const lc = item.name.toLowerCase(); // change search term to lowercase\n\n        const filter = e.target.value.toLowerCase(); // check to see if the current list item includes the search term\n        // If it does, it will be added to newList. Using lowercase eliminates\n        // issues with capitalization in search terms and search content\n\n        return lc.includes(filter);\n      });\n    } else {\n      // If the search bar is empty, set newList to original task list\n      newList = this.props.items;\n    } // Set the filtered state based on what our rules added to newList\n\n\n    this.setState({\n      filtered: newList\n    });\n  }\n\n  addToFavorite(gameName) {\n    console.log(gameName);\n    this.props.addFavorite(gameName);\n  }\n\n  delToFavorite(gameName) {\n    this.props.delFavorite(gameName);\n  }\n\n  render() {\n    const {\n      favoritesGame\n    } = this.props;\n    console.log(favoritesGame);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"input width-search\",\n      onChange: this.handleChange,\n      placeholder: \"Search...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      class: \"display-home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.state.filtered.map((game, i) => {\n      if (favoritesGame.includes(game.name)) {\n        return React.createElement(\"div\", {\n          key: i,\n          className: \"gameDiv\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: game.cover,\n          className: \"gameImg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"description\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"gameTitle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, game.name), React.createElement(\"img\", {\n          src: Hearth,\n          id: i,\n          className: \"pictureFavorite\",\n          onClick: () => this.delToFavorite(game.name.toString()),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        })), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, game.description), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, \"genre : \", game.genre), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, \"date de sortie : \", game.date)));\n      } else {\n        return React.createElement(\"div\", {\n          key: i,\n          className: \"gameDiv\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: game.cover,\n          className: \"gameImg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"description\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"gameTitle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, game.name), React.createElement(\"img\", {\n          src: EmptyHearth,\n          id: i,\n          className: \"pictureFavorite\",\n          onClick: () => this.addToFavorite(game.name.toString()),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        })), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, game.description), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, \"genre : \", game.genre), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, \"date de sortie : \", game.date)));\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    favoritesGame: state.favoritesGame\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addFavorite: gameName => {\n      dispatch(addFavorite(gameName));\n    },\n    delFavorite: gameName => {\n      dispatch(delFavorite(gameName));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(List));","map":{"version":3,"sources":["/Users/Gwenael/Documents/cours/L1/fevrier_JavaPOO2_Js2/Js2/git/JS-avanc-/coding/src/Component/List.js"],"names":["React","Hearth","EmptyHearth","addFavorite","delFavorite","withRouter","connect","Search","List","Component","constructor","props","state","filtered","favoritesGame","handleChange","bind","componentDidMount","setState","items","componentWillReceiveProps","nextProps","e","currentList","newList","target","value","filter","item","lc","name","toLowerCase","includes","addToFavorite","gameName","console","log","delToFavorite","render","map","game","i","cover","toString","description","genre","date","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Hearth from \"../pictures/hearth.png\";\nimport EmptyHearth from \"../pictures/hearth_empty.png\";\nimport {addFavorite, delFavorite} from \"../redux/actions\";\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {Search} from \"./Search\";\n\n\nexport class List extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filtered: [],\n            favoritesGame : []\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({\n            filtered: this.props.items\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            filtered: nextProps.items\n        });\n    }\n\n    handleChange(e) {\n        // Variable to hold the original version of the list\n        let currentList = [];\n        // Variable to hold the filtered list before putting into state\n        let newList = [];\n\n        // If the search bar isn't empty\n        if (e.target.value !== \"\") {\n            // Assign the original list to currentList\n            currentList = this.props.items;\n\n            // Use .filter() to determine which items should be displayed\n            // based on the search terms\n            newList = currentList.filter(item => {\n                // change current item to lowercase\n                const lc = item.name.toLowerCase();\n                // change search term to lowercase\n                const filter = e.target.value.toLowerCase();\n                // check to see if the current list item includes the search term\n                // If it does, it will be added to newList. Using lowercase eliminates\n                // issues with capitalization in search terms and search content\n                return lc.includes(filter);\n            });\n        } else {\n            // If the search bar is empty, set newList to original task list\n            newList = this.props.items;\n        }\n        // Set the filtered state based on what our rules added to newList\n        this.setState({\n            filtered: newList\n        });\n    }\n\n\n    addToFavorite(gameName){\n        console.log(gameName);\n        this.props.addFavorite(gameName);\n    }\n\n    delToFavorite(gameName){\n        this.props.delFavorite(gameName);\n    }\n\n\n\n    render() {\n        const { favoritesGame } = this.props;\n        console.log(favoritesGame)\n        return (\n            <div>\n                <div class=\"text-center\">\n                    <input type=\"text\"  className=\"input width-search\" onChange={this.handleChange} placeholder=\"Search...\" />\n                </div>\n                <div class=\"display-home\">\n                {this.state.filtered.map((game, i) =>\n                    {\n                        if (favoritesGame.includes(game.name)) {\n                            return (\n                                    <div key={i} className=\"gameDiv\">\n                                        <img src={game.cover} className=\"gameImg\"/>\n                                        <div className=\"description\">\n                                            <div className=\"gameTitle\">\n                                                <p>\n                                                    {game.name}\n                                                </p>\n                                                <img src={Hearth} id={i} className=\"pictureFavorite\"\n                                                    onClick={() => this.delToFavorite(game.name.toString())}/>\n                                            </div>\n                                            <p>{game.description}</p>\n                                            <p>\n                                                genre : {game.genre}\n                                            </p>\n                                            <p>\n                                                date de sortie : {game.date}\n                                            </p>\n                                        </div>\n                                    </div>\n                            )\n\n                        }\n                        else {\n                            return (\n\n                                <div key={i} className=\"gameDiv\">\n                                    <img src={game.cover} className=\"gameImg\"/>\n                                    <div className=\"description\">\n                                        <div className=\"gameTitle\">\n                                            <p>\n                                                {game.name}\n                                            </p>\n                                            <img src={EmptyHearth} id={i} className=\"pictureFavorite\"\n                                                 onClick={() => this.addToFavorite(game.name.toString())}/>\n                                        </div>\n                                        <p>{game.description}</p>\n                                        <p>\n                                            genre : {game.genre}\n                                        </p>\n                                        <p>\n                                            date de sortie : {game.date}\n                                        </p>\n                                    </div>\n                                </div>\n\n                            )\n                        }\n                    }\n\n                )}\n                </div>\n\n            </div>\n        )\n    }\n}\n\n\n\nconst mapStateToProps = state => {\n    return {\n        favoritesGame : state.favoritesGame\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addFavorite: gameName => {\n            dispatch(addFavorite(gameName))\n        },\n        delFavorite : gameName=>{\n            dispatch(delFavorite(gameName))\n        }\n    };\n};\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(List));\n"]},"metadata":{},"sourceType":"module"}